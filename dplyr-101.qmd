---
title: "Dplyr 101"
author: "Fabrice Rossi"
format: 
  html:
    code-fold: true
---

```{r}
#| message: false
here::i_am("git-101-2024.Rproj")
library(here)
library(vroom)
library(ggplot2)
theme_set(theme_bw())
```

## Data import

```{r}
#| message: false
white_wine <- vroom(here("data", "winequality-white.csv"))
```

|                        |                      |
|------------------------|----------------------|
| Number of observations | `r NROW(white_wine)` |
| Number of variables    | `r NCOL(white_wine)` |

```{r}
ggplot(white_wine, aes(x = quality)) +
  geom_bar()
```

## Data transformation
```{r}
#| message: false
library(dplyr)
```

### Column extraction 
```{r}
class(white_wine)
## class + column extraction
class(white_wine$quality)
## column extraction and then class
white_wine$quality |> class()
white_wine[["quality"]] |> class()
white_wine$`fixed acidity` |> class()
white_wine[["fixed acidity"]] |> class()
## dplyr style
white_wine |>
  pull(quality) |>
  class()
class(pull(white_wine, quality))
```

With `dplyr`, `pull()` is the column extraction function, somewhat similar to the
dollar `$` operator and to the double bracket `[[]]`. 


### Column recoding
This ggplot call gives a warning because `quality` is numeric which is not
supported for bar filling in `geom_bar()`.

```{r}
#| eval: false
#| code-fold: false
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```


```{r}
#| eval: false
white_wine$quality <- factor(white_wine$quality,
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
white_wine$quality <- white_wine$quality |> factor(
  ordered = TRUE,
  levels = 3:9
) ## 3:9 means 3, 4, 5, ..., 9
```

```{r}
white_wine <- white_wine |>
  mutate(quality = factor(quality, ordered = TRUE, levels = 3:9))
```

```{r}
ggplot(white_wine, aes(x = quality, fill = quality)) +
  geom_bar()
```

### Computing new columns
This is again a task for `mutate()`.

```{r}
white_wine <- white_wine |>
  mutate(`captured sulfur dioxide` = `total sulfur dioxide` - `free sulfur dioxide`,
         `free sd %` = round(`free sulfur dioxide` / `total sulfur dioxide` * 100, 2))
```

## Sub-setting
### Selecting columns
Column sub-setting is done with the `select()` function.

```{r}
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH)
```

Side note: we can display nicely data frames with the `knitr::kable()` function
but the original data frame is too big, so we select the first 10 rows with
`slice()`. 

```{r}
#| message: false
white_wine |> 
  select(`fixed acidity`, `volatile acidity`, `citric acid`, pH) |>
  slice(1:10) |>
  knitr::kable()
```
Positional selection based on the indices of the columns.

```{r}
#| eval: false
white_wine |> 
  select(1:3)
```

Columns can also be selected based on conditions on their names or on their
nature. 

```{r}
#| eval: false
white_wine |> 
  select(contains("acid") | pH)
```

Selection based on the content.

```{r}
#| eval: false
white_wine |> 
  select(where(is.factor))
```

```{r}
#| eval: false
white_wine |> 
  select(where(\(x) is.numeric(x) & (max(x) < 5))) #for each columns of the data frame produice TRUE or FALSE consedering if it is numeric and inferior at 5.
```

### Selecting rows

Simple selection is based on indices with `slice()`. 

```{r}
white_wine |> 
  slice(1:5, 150:155) |>
  select(alcohol, quality) |>
  knitr::kable()
```

Condition based selection uses `filter()`.

```{r}
white_wine |> 
  filter(alcohol > 14) |>
  select(alcohol, quality, `citric acid`, `residual sugar`) |>
  knitr::kable()
```
### Simple application
```{r}
ggplot(white_wine, aes(x=alcohol)) +
  geom_density(bw="sj") +
  geom_rug(alpha = 0.1)
```
```{r}
white_wine |> 
  filter(alcohol >= 13, `citric acid` < 1) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```

```{r}
white_wine |> 
  filter(alcohol <= 9) |>
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c()
```
```{r}
white_wine |>
  mutate(`alcohol category` = case_when(alcohol <= 9 ~ "low",
                                        alcohol >= 13 ~ "high",
                                        .default = "medium")) |>
  filter(`alcohol category` != "medium") |>
  filter(`citric acid` <= 1) |> 
  ggplot(aes(x=`citric acid`, y=`residual sugar`, color = alcohol)) +
  geom_point(alpha=0.75) +
  scale_color_viridis_c() +
  facet_wrap(vars(`alcohol category`))
```

## Aggregation functions 
AKA summary functions: turn a possibly long vector into a single value (still a vector!).
- standard stats: `max()`, `min()`, `median()``
- logical operations: `Ã ny()` and `all()`
- counts and ranks: `n()``

### simple summary use
based on the `summarise()` function or inside a `mutate()` call.

```{r}
white_wine %>% summarise(
  med_alcohol = median(alcohol),
  sd(alcohol))
```



```{r}
white_wine %>% 
  select(alcohol) %>%
  mutate(a_m_median= alcohol - median(alcohol),
         .keep ="none")
```


```{r}
white_wine %>% 
  select(alcohol) %>%
  mutate(na= (alcohol - mean(alcohol))/sd(alcohol),
         na_r = (alcohol - median(alcohol))/IQR(alcohol),
         .keep = "none")
```
### More complex summary function
Essentially 'quantile()'
```{r}
quantile(white_wine$ `residual sugar`)
```

```{r}
quantile(white_wine$ `residual sugar`, probs = seq (0,1,0.1))
```

```{r}
mean(white_wine$`residual sugar`)
```

```{r}
white_wine%>%
  summarise((quantile(`residual sugar`)))
```
```{r}
white_wine%>%
  reframe((quantile(`residual sugar`)), mean(`residual sugar`))
```
```{r}
sugar_stats<- white_wine%>%
  summarise(list(quantile(`residual sugar`)), 
        mean(`residual sugar`))
```

### Group by
```{r}
white_wine %>%
  mutate(ha= alcohol>+13) %>%
  summarise(median(`residual sugar`),
            n(),
            .by = ha)
```
```{r}
white_wine %>%
  mutate(ac =cut(alcohol, breaks=c(7, 9,10,12,13,15)), ordered_result=TRUE) %>%
  summarise(median(`residual sugar`),
            n(),
            .by = ac)
```
```{r}
white_wine %>%
  mutate(ac =cut(alcohol, breaks=c(7, 9,10,12,13,15)), 
         ordered_result=TRUE) %>%
  ggplot(aes(x=ac)) +
  geom_bar()
```
```{r}
ggplot(white_wine, aes(x=alcohol, y= quality))+
  geom_boxplot()
```
```{r}
white_wine %>%
  mutate(ac =cut(alcohol, breaks=c(7, 9,10,12,13,15)), 
         ordered_result=TRUE) %>%
  ggplot(aes(x=ac, fill= quality)) +
  geom_bar(position="fill")
```
```{r}
alcohol_quantile <-
white_wine%>% 
  pull(alcohol) %>%
  quantile(probs= seq(0,1, by= 0.1))
```
```{r}
alcohol_quantile[1] <- alcohol_quantile[1]-1
alcohol_quantile
```

```{r}
white_wine %>%
  mutate(ac =cut(alcohol, breaks=alcohol_quantile), 
         ordered_result=TRUE) %>%
  ggplot(aes(x=ac)) +
  geom_bar()
```
```{r}
white_wine %>%
  mutate(ac =cut(alcohol, breaks=alcohol_quantile), 
         ordered_result =TRUE) %>%
  ggplot(aes(x=ac, fill= quality)) +
  geom_bar(position="fill")
```
### Functions with a .by parameter
Some dplyr verbs support the`by`parameter:

- `summarise()``
- `mutate()``
- `slice()``
- `filter()``
```{r}
white_wine %>%
  slice(1:5, .by=quality) %>%
  select(1:2 | quality)

```
```{r}
white_wine %>%
  slice_sample(n=1, by = quality) %>%
  select(1:2 | quality)
```
```{r}
white_wine %>%
  slice_max(alcohol, by = quality) %>%
  select(alcohol | quality)
```
```{r}
white_wine %>% mutate(avg_alcohol_quality = mean(alcohol), .by=quality)
```
### `group_by()`

```{r}
white_wine %>%
  group_by(quality)
```
```{r}
white_wine%>%
  group_by(quality)%>%
  summarise(mean(`citric acid`))
```

Samely
```{r}
white_wine%>%
  summarise(mean(`citric acid`), .by= quality)
```
```{r}
diamonds %>% 
  group_by(cut, clarity) %>%
  summarise(price_mc=median(price), .groups= "drop_last") %>%
  summarise(mean(price_mc))
```
```{r}
diamonds%>%
  summarise(price_mc=median(price), .by=c(cut, clarity)) %>%
  arrange(mean(price_mc), .by=cut)
```
```{r}
diamonds %>%
  group_by(cut, color) %>%
  summarise(N=n(), .groups="drop_last") %>%
  summarise(sum(N))

```
```{r}
diamonds %>%
  group_by(cut, color) %>%
  summarise(N=n(), .groups="drop_last") %>%
  mutate(prob=N/sum(N)) %>%
  ungroup()

```
```{r}
diamonds %>%
  summarise(N=n(), .by=c(cut, color))%>%
  mutate(prob=N/sum(N), .by=cut) %>%
  arrange(cut, color)
```

## Tidying data
```{r}
library(tidyr)
```

### long to wide table (pivoting)

```{r}
color_given_cut <-
diamonds %>%
  group_by(cut, color) %>%
  summarise(N=n(), .groups="drop_last") %>%
  mutate(prob=N/sum(N)) %>%
  ungroup()
View(color_given_cut)
```


```{r}
color_given_cut %>%
  select(!N) %>%
  pivot_wider(id_cols = cut,
              names_from = color, 
              values_from = prob)
```
```{r}
color_given_cut %>%
  select(!N) %>%
  slice_sample(n=30) %>%
  pivot_wider(id_cols = cut,
              names_from = color, 
              values_from = prob)
```

### wide to long 
```{r}
data("world_bank_pop")
```

```{r}
world_bank_pop %>%
  filter(indicator == "SP.POP.TOTL") %>%
  filter(country %in% c("ESP", "FRA")) %>%
  select(!indicator)

  
```
```{r}
world_bank_pop %>%
  filter(indicator == "SP.POP.TOTL") %>%
  filter(country %in% c("ESP", "FRA")) %>%
  select(!indicator) %>%
  pivot_longer(!country, names_to= "year", names_transform= as.integer,
               values_to= "total population") %>%
  filter(country=="ESP")%>%
  ggplot(aes(x=year, y=`total population`)) +
  geom_line()
```
```{r}
world_bank_pop %>%
  filter(country %in% c("ESP", "FRA")) %>%
  pivot_longer(!country & !indicator)
```



```{r}
world_bank_pop %>%
  filter(indicator == "SP.POP.TOTL") %>%
  filter(country %in% c("ESP", "FRA")) %>%
  select(!indicator) %>%
  filter(!is.na(2000)) %>%
  slice_sample(n=10, weight_by =`2000`)%>%
  pivot_longer(!country, names_to= "year", names_transform= as.integer,
               values_to= "total population", color= country) +
  geom_line()+
  ggplot(aes(x=year, y=`total population`)) +
  geom_line()
```



## Nesting
```{r}
class(diamonds)
```

```{r}
df_list <- tibble(x= 1 : 3,
                  y= letters[1:3],
                  z= list(c(1,2),c("Alice", "Bob", "Charlie"),3))
df_list
```
```{r}
list(1,2, "c")
```
```{r}
daf_list <- data_frame(x= 1 : 3,
                  y= letters[1:3],
                  z= I(list(c(1,2),c("Alice", "Bob", "Charlie"),3)))
daf_list
```
### Linear models
```{r}
diamonds_price_lm <- lm(price ~ ., data = diamonds) # le point c'est toutes les autres
```


```{r}
diamonds_price_lm
```
```{r}
summary(diamonds_price_lm)
```
```{r}
plot(diamonds_price_lm)
```

Create a lineaire model for a subset of the diamaonds df indentified as the cut of the diamond dF
```{r}
diamonds %>% nest(.by=cut)
```
```{r}
Diamonds_price_cut <- diamonds %>% 
  nest(.by=cut) %>% 
  mutate(sub_lm = lapply(data, \(x) lm(price ~., data=x)))
Diamonds_price_cut
```
```{r}
library(broom)
```
```{r}
Diamonds_price_cut<- Diamonds_price_cut %>% 
  mutate(tlm = lapply(sub_lm, tidy))
```

```{r}
Diamonds_price_cut%>% 
  select(cut, tlm) %>%
  unnest(tlm)
```
```{r}
Diamonds_price_cut%>% 
  select(cut, tlm) %>%
  unnest(tlm) %>%
  filter(p.value < 0.05) %>%
  select(cut, term, estimate) %>%
  pivot_wider(names_from = term, values_from = estimate)
```


## Mutiple tables
```{r}
#| message: false
Product <- vroom(here("data", "northwind", "products.csv"))
```
The `ProductID`column is the $$primary key$$ of the `product`table.

```{r}
PID_nb <- Product %>% 
  select(ProductID) %>%
  filter(!is.na(ProductID) & !is.null(ProductID)) %>%
  distinct(ProductID) %>%
  nrow()

```

Is `ProductID`a valid **primaey key**: `r pid_nb == nrow(products)``

### Foreign keys

```{r}
#| message: false
library(readr)
Categories <- read_csv(here("data", "northwind", "Categories.csv"), 
                       col_types = "icc-")
```

`products`table has a `CategoryID`column which is likely to be a foreign key referencing the primary key of categories

### Join 
A **join** operation is a way to combine 2 tables into a single one by selecting a subset of the Cartesian product btw the 2 tables.

The **natural join** selects only pairs of tuples that have the same values on columns that have 
Ã¬nner_join` in dplyr 
```{r}
p_c <- Product %>%
  inner_join(CategoryID= CategoryID -1) %>%
  inner_join(Categories)
```
IN this case, as expected, puples with no match are removed from the result. 
We can verify that `CategoryID`is a foreign key by counting the number of tuples in the result. Here this is : `r nrow(p_c) == nrows(products)`

```{r}
#| message: false
Supplier <- vroom(here("data", "northwind", "suppliers.csv"))
```


